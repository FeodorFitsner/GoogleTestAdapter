<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)Core.Tests\bin\$(ConfigurationName)\GoogleTestAdapter.Core.Tests.dll" #>
<#@ assembly name="$(SolutionDir)TestAdapter.Tests\bin\$(ConfigurationName)\GoogleTestAdapter.TestAdapter.Tests.dll" #>
<#@ assembly name="$(SolutionDir)VsPackage.Tests\bin\$(ConfigurationName)\GoogleTestAdapter.VsPackage.Tests.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="GoogleTestAdapter" #>
<#@ import namespace="GoogleTestAdapter.VsPackage" #>
<#@ import namespace="GoogleTestAdapter.VsPackage.Helpers" #>
<#@ import namespace="GoogleTestAdapterUiTests" #>
<#@ output extension=".cs" #>
<#
//    System.Diagnostics.Debugger.Launch();
//    System.Diagnostics.Debugger.Break();
	string csvFile = this.Host.ResolvePath("GTA_Console.csv");
	TestcaseCsvReader reader = new TestcaseCsvReader(csvFile);
#>
using System.IO;
using System.Runtime.CompilerServices;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using GoogleTestAdapterUiTests;

namespace GoogleTestAdapter.VsPackage.GeneratedTests
{

	public abstract class AbstractConsoleTests
	{
		private readonly string solutionFile;
		protected readonly string testAdapterDir;

		public AbstractConsoleTests()
		{
			AbstractConsoleIntegrationTests.GetDirectories(out testAdapterDir, out solutionFile);
		}

        private void RunTestsAndCheckOutput(string solutionFile, string typeName, string arguments, [CallerMemberName] string testCaseName = null)
        {
            string resultString = AbstractConsoleIntegrationTests.RunExecutableAndGetOutput(solutionFile, arguments, GetVersion());
			string projectDir = Path.Combine(Path.GetDirectoryName(solutionFile), @"..\GoogleTestAdapter\VsPackage.Tests.Generated");
            new ResultChecker(Path.Combine(projectDir, "GoldenFiles"), Path.Combine(projectDir, "TestErrors"), ".txt")
				.CheckResults(resultString, typeName, testCaseName);
        }

        protected abstract string GetAdapterIntegration();
        protected abstract VsExperimentalInstance.Versions GetVersion();

		<#
		List<Line> lines = reader.GetObjects();
		IDictionary<string, string> executables = new Dictionary<string, string>();
		foreach (Line line in lines)
		{
			if (!executables.ContainsKey(line.TestFile))
				executables.Add(line.TestFile, line.ActualTestFile);
		#>

		public virtual void <#= line.MethodName #>()
		{
			string arguments = GetAdapterIntegration();
			arguments += @"<#= line.Arguments #>";
            RunTestsAndCheckOutput(solutionFile, GetType().Name, arguments);
		}
		<# } #>

		<# foreach (string executable in executables.Keys) { #>

		public virtual void List_TestsOf_<#= executable #>()
		{
			string arguments = GetAdapterIntegration() + @" /ListTests:""<#= executables[executable] #>"" /Logger:Console";
            RunTestsAndCheckOutput(solutionFile, GetType().Name, arguments);
		}
		<# } #>

	}


	[TestClass]
	public class ConsoleVs2015DllTests : AbstractConsoleTests
	{
        protected override string GetAdapterIntegration()
        {
            return @"/TestAdapterPath:" + testAdapterDir;
        }

        protected override VsExperimentalInstance.Versions GetVersion()
        {
            return VsExperimentalInstance.Versions.VS2015;
        }

		#region method stubs for code coverage

		<# foreach (Line line in lines) { #>

		[TestMethod]
        [TestCategory("End to end")]
		public override void <#= line.MethodName #>()
		{
			base.<#= line.MethodName #>();
		}
		<# } #>

		<# foreach (string executable in executables.Keys) { #>

		[TestMethod]
        [TestCategory("End to end")]
		public override void List_TestsOf_<#= executable #>()
		{
			base.List_TestsOf_<#= executable #>();
		}
		<# } #>

		#endregion
	}

	[TestClass]
	public class ConsoleVs2013DllTests : AbstractConsoleTests
	{
        protected override string GetAdapterIntegration()
        {
            return @"/TestAdapterPath:" + testAdapterDir;
        }

        protected override VsExperimentalInstance.Versions GetVersion()
        {
            return VsExperimentalInstance.Versions.VS2013;
        }

		#region method stubs for code coverage

		<# foreach (Line line in lines) { #>

		[TestMethod]
        [TestCategory("End to end")]
		public override void <#= line.MethodName #>()
		{
			base.<#= line.MethodName #>();
		}
		<# } #>

		<# foreach (string executable in executables.Keys) { #>

		[TestMethod]
        [TestCategory("End to end")]
		public override void List_TestsOf_<#= executable #>()
		{
			base.List_TestsOf_<#= executable #>();
		}
		<# } #>

		#endregion
	}

	<# if (AbstractConsoleIntegrationTests.IsRunningOnBuildServer()) { #>
	[TestClass]
	public class ConsoleVs2013VsixTests : AbstractConsoleTests
	{
        [ClassInitialize]
        public static void InstallVsix(TestContext testContext)
        {
            VS.SetupVanillaVsExperimentalInstance("", VsExperimentalInstance.Versions.VS2013);
        }

        [ClassCleanup]
        public static void Cleanup()
        {
            VS.CleanVsExperimentalInstance();
        }

        protected override string GetAdapterIntegration()
        {
            return @"/UseVsixExtensions:true";
        }

        protected override VsExperimentalInstance.Versions GetVersion()
        {
            return VsExperimentalInstance.Versions.VS2013;
        }

		#region method stubs for code coverage
		<# foreach (Line line in lines) { #>

		[TestMethod]
        [TestCategory("End to end")]
		public override void <#= line.MethodName #>()
		{
			base.<#= line.MethodName #>();
		}
		<# } #>

		<# foreach (string executable in executables.Keys) { #>

		[TestMethod, Ignore]
        [TestCategory("End to end")]
		public override void List_TestsOf_<#= executable #>()
		{
			base.List_TestsOf_<#= executable #>();
		}
		<# } #>

		#endregion

	}

	[TestClass]
	public class ConsoleVs2015VsixTests : AbstractConsoleTests
	{
        [ClassInitialize]
        public static void InstallVsix(TestContext testContext)
        {
            VS.SetupVanillaVsExperimentalInstance("", VsExperimentalInstance.Versions.VS2015);
        }

        [ClassCleanup]
        public static void Cleanup()
        {
            VS.CleanVsExperimentalInstance();
        }

        protected override string GetAdapterIntegration()
        {
            return @"/UseVsixExtensions:true";
        }

        protected override VsExperimentalInstance.Versions GetVersion()
        {
            return VsExperimentalInstance.Versions.VS2015;
        }

		#region method stubs for code coverage
		<# foreach (Line line in lines) { #>

		[TestMethod]
        [TestCategory("End to end")]
		public override void <#= line.MethodName #>()
		{
			base.<#= line.MethodName #>();
		}
		<# } #>

		<# foreach (string executable in executables.Keys) { #>

		[TestMethod]
        [TestCategory("End to end")]
		public override void List_TestsOf_<#= executable #>()
		{
			base.List_TestsOf_<#= executable #>();
		}
		<# } #>

		#endregion

	}

    [TestClass]
    public class ConsoleVs2015VsixIntegrationTests : AbstractConsoleIntegrationTests
    {

        [ClassInitialize]
        public static void InstallVsix(TestContext testContext)
        {
            VS.SetupVanillaVsExperimentalInstance("", VsExperimentalInstance.Versions.VS2015);
        }

        [ClassCleanup]
        public static void Cleanup()
        {
            VS.CleanVsExperimentalInstance();
        }

        protected override string GetAdapterIntegration()
        {
            return @"/UseVsixExtensions:true";
        }

        protected override VsExperimentalInstance.Versions GetVersion()
        {
            return VsExperimentalInstance.Versions.VS2015;
        }

        #region method stubs for code coverage

        [TestMethod]
        [TestCategory("End to end")]
        public override void Console_ListDiscoverers_DiscovererIsListed()
        {
            base.Console_ListDiscoverers_DiscovererIsListed();
        }

        [TestMethod]
        [TestCategory("End to end")]
        public override void Console_ListExecutors_ExecutorIsListed()
        {
            base.Console_ListExecutors_ExecutorIsListed();
        }

        [TestMethod]
        [TestCategory("End to end")]
        public override void Console_ListSettingsProviders_SettingsProviderIsListed()
        {
            base.Console_ListSettingsProviders_SettingsProviderIsListed();
        }

        #endregion
	}

    [TestClass]
    public class ConsoleVs2013VsixIntegrationTests : AbstractConsoleIntegrationTests
    {

        [ClassInitialize]
        public static void InstallVsix(TestContext testContext)
        {
            VS.SetupVanillaVsExperimentalInstance("", VsExperimentalInstance.Versions.VS2013);
        }

        [ClassCleanup]
        public static void Cleanup()
        {
            VS.CleanVsExperimentalInstance();
        }

        protected override string GetAdapterIntegration()
        {
            return @"/UseVsixExtensions:true";
        }

        protected override VsExperimentalInstance.Versions GetVersion()
        {
            return VsExperimentalInstance.Versions.VS2013;
        }

        #region method stubs for code coverage

        [TestMethod, Ignore]
        [TestCategory("End to end")]
        public override void Console_ListDiscoverers_DiscovererIsListed()
        {
            base.Console_ListDiscoverers_DiscovererIsListed();
        }

        [TestMethod]
        [TestCategory("End to end")]
        public override void Console_ListExecutors_ExecutorIsListed()
        {
            base.Console_ListExecutors_ExecutorIsListed();
        }

        [TestMethod]
        [TestCategory("End to end")]
        public override void Console_ListSettingsProviders_SettingsProviderIsListed()
        {
            base.Console_ListSettingsProviders_SettingsProviderIsListed();
        }

        #endregion

    }
	<# } #>

}

<#+

    class Line
    {
        internal string TestFile;
        internal string ActualTestFile;
		internal bool SettingsFile;
		internal string ActualSettingsFile;
		internal string TestCaseFilter;
		internal bool EnableCodeCoverage;
		internal bool InIsolation;

		internal string MethodName 
		{
			get 
			{
				string settings = SettingsFile ? "_Settings" : "";
				string codeCoverage = EnableCodeCoverage ? "_Coverage" : "";
				string isolation = InIsolation ? "_Isolation" : "";
				string filter = TestCaseFilter == "none" ? "" : "_" + TestCaseFilter;

				string result = TestFile + settings + codeCoverage + isolation + filter;

				result = result.Replace(".", "_");
				result = result.Replace("=", "_EQ_");
				result = result.Replace("|", "_OR_");
				result = result.Replace("&", "_AND_");

				if (result.Contains("*"))
					result = "NEG_" + result.Replace("*", "");;

				return result;
			}
		}

		internal string Arguments
		{
			get
			{
				string arguments = " \"\"" + ActualTestFile + "\"\"";

				if (SettingsFile)
					arguments += " /Settings:\"\"" + ActualSettingsFile + "\"\"";

				if (!"none".Equals(TestCaseFilter))
					arguments += " /TestCaseFilter:\"\"" + TestCaseFilter + "\"\"";

				if (EnableCodeCoverage)
					arguments += " /EnableCodeCoverage";

				if (InIsolation)
					arguments += " /InIsolation";

				return arguments;
			}
		}
    }
	
    class TestcaseCsvReader : CsvReader<Line>
    {
        internal TestcaseCsvReader(string csvFile) : base(csvFile, '\t', true) { }

        protected override Line GetObject(string[] columns)
        {
            Line line = new Line();
			line.TestFile = columns[0];
			line.ActualTestFile = GetActualFile(columns[0]);
			line.SettingsFile = bool.Parse(columns[1]);
			if (line.SettingsFile)
				line.ActualSettingsFile = AbstractGoogleTestExtensionTests.UserTestSettingsForGeneratedTests;
			else
				line.ActualSettingsFile = "";
			line.TestCaseFilter = columns[2];
			line.EnableCodeCoverage = bool.Parse(columns[3]);
			line.InIsolation = bool.Parse(columns[4]);
			return line;
        }

		private string GetActualFile(string key)
		{
			switch(key)
			{
				case "SampleTests":
					return AbstractGoogleTestExtensionTests.SampleTests;
				case "HardCrashingSampleTests":
					return AbstractGoogleTestExtensionTests.HardCrashingSampleTests;
				case "X861":
					return AbstractGoogleTestExtensionTests.X86StaticallyLinkedTests;
				case "X862":
					return AbstractGoogleTestExtensionTests.X86ExternallyLinkedTests;
				case "X641":
					return AbstractGoogleTestExtensionTests.X64StaticallyLinkedTests;
				case "X642":
					return AbstractGoogleTestExtensionTests.X64ExternallyLinkedTests;
				default:
					throw new Exception("Unknown test executable key: " + key);
			}
		}

    }

#>